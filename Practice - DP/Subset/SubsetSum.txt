The problems are of two types: 
1. Find the ways to create subset of required sum.
2. Print all possible subsets of required sum.

1. Find ways:
Can be optimized using dynamic programming. Follow the syntax of take or not take.
There are further more types on the basis of repetitions:
 - Unique Combination. 
 {1,2,3} Sum: 4 - {1,1,1,1} {1,1,2} {1,3} {2,2} 
 Question * COIN CHANGE II

 - Unique Combination + No Duplicate Subset. (The array will contain duplicates). 
 {1,1,3} Sum 4: {1,1,1,1} {1,3} or {1,3} : Each candidate is selected once. 
 //Run a for loop for take or not take.
 Question * COMBINATION SUM II

 - Duplicate allowed. (1,2 & 2,1: Different).
 {1,2,3} Sum 4: {1,1,1,1} {1,1,2} {1,2,1} {2,1,1} {1,3} {3,1}
 Question * COMBINATION SUM VI

 2. Find subsets:
 Cannot be optimized using dynamic programming. Check constraints.
 Pass the subset & solution vectors as parameters & use the concept of backtracking to get the solution.